// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.fovea1959.simple.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.fovea1959.simple.Robot;

/**
 *
 */
public class  AutonomousMoveForAWhileCommand extends Command {

    double numberOfSecondsIShouldMoveFor;
    double amountOfPowerToUse;
    
    Timer timer = new Timer();

    public AutonomousMoveForAWhileCommand(double seconds, double power) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveSubsystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
        numberOfSecondsIShouldMoveFor = seconds;
        amountOfPowerToUse = power;
    }
    
    /*
     * if the amount of time is not specified, then use 3.0 seconds.
     */
    public AutonomousMoveForAWhileCommand() {
    	this(3.0, 0.5);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	timer.reset();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Robot.driveSubsystem.moveForward(amountOfPowerToUse);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return timer.get() > numberOfSecondsIShouldMoveFor;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveSubsystem.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
